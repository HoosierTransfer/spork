#include <App.hpp>

#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <imgui/imgui.h>
#include <imgui/backends/imgui_impl_glfw.h>
#include <imgui/backends/imgui_impl_opengl3.h>

#include <Framebuffer.hpp>
#include <lenia/Lenia.hpp>
#include <lenia/LeniaTemplate.h>

#include <chrono>
#include <thread>

#include <vector>

void parse(std::string str, Grid& grid) {
    int x = 54;
    int y = 54;
    std::string cell = "";
    for (int i = 0; i < str.length(); i++) {
        if (str[i] == ',') {
            grid.set(x, y, std::stod(cell));
            cell = "";
            x++;
        } else if (str[i] == '/') {
            grid.set(x, y, std::stod(cell));
            cell = "";
            x = 54;
            y++;
        } else {
            cell += str[i];
        }
    }
}

void App::run() {
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return;
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* window = glfwCreateWindow(1280, 720, "Lenia++", nullptr, nullptr);
    if (!window) {
        std::cerr << "Failed to create window" << std::endl;
        glfwTerminate();
        return;
    }

    glfwMakeContextCurrent(window);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cerr << "Failed to initialize GLAD" << std::endl;
        glfwTerminate();
        return;
    }

    glViewport(0, 0, 1280, 720);

    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard; 

    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init();

    LeniaTemplate leniaTemplate = LeniaTemplate();

    leniaTemplate.updateFrequency = 10;

    Lenia lenia(128, 128, leniaTemplate);

    lenia.parse("R=36;k=quad4(1,2/3,1/3,2/3);d=gaus(0.16,0.01)*0.1;cells=0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.006577,0.099694,0.151464,0.119071,0.035318,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.232303,0.565236,0.684421,0.651256,0.494364,0.274705,0.085097,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.614222,1,1,1,1,0.86755,0.581134,0.329327,0.16835,0.071219,0.014423,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0.87291,0.843547,0.982313,1,1,0.879087,0.630634,0.47,0.360715,0.272426,0.184028,0.096486,0.02618,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0.420071,0.310827,0.626756,0.94008,1,1,1,0.926564,0.769537,0.654569,0.566955,0.495385,0.421667,0.324909,0.185791,0.041439,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.113018,0.561327,0.936968,1,1,1,1,1,0.91261,0.815264,0.741935,0.682289,0.611652,0.488012,0.271552,0.037856,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.335798,1,0,0,0,0.060658,0.627418,0.997769,1,1,1,1,1,1,1,1,0.982907,0.885567,0.726092,0.492054,0.186562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.302375,1,1,1,1,0.912359,0.812999,0.831362,0.91863,0.995682,1,1,1,0.941218,0.664148,0.362549,0.076564,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.023305,1,1,1,1,0.80243,0.333596,0.275947,0.435057,0.68537,0.919826,1,1,1,1,0.815429,0.544726,0.272514,0.038642,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.034258,0,0,0,0,1,1,1,1,1,0,0,0,0,0.401395,0.792004,1,1,1,1,0.929902,0.681576,0.491236,0.259224,0.053109,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.529714,0,0,0,0,1,1,1,0.980727,1,0.183172,0,0,0,0,0.145098,0.647575,0.948312,1,1,1,0.920485,0.692053,0.604025,0.50485,0.316176,0.129226,0.023614,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,1,0.6793,0,0,0,0,0.709422,1,1,0.823714,1,1,0.003175,0,0,0,0,0,0.484559,0.818462,0.935135,0.942263,0.883632,0.628115,0.528637,0.57422,0.635924,0.600635,0.461937,0.317064,0.203615,0.098546,0.007023,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0.69955,0.853533,0,0,0,0,0,1,1,1,1,1,0.32273,0,0,0,0,0,0,0.341646,0.55906,0.574459,0.483703,0.242913,0.153633,0.257956,0.466771,0.704735,0.840487,0.822598,0.730652,0.604871,0.432968,0.203587,0.005919,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0.035326,1,0,0,0,0,0,1,1,1,1,1,0.723929,0,0,0,0,0,0.016782,0.178545,0.270904,0.098961,0,0,0,0,0.013506,0.410597,0.85241,1,1,1,0.97351,0.747365,0.461502,0.135787,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0.907601,0.638987,0,0,0,0,0.061405,0.416599,0.819012,0.787979,0.142002,0,0,0,0,0,0,0.534218,0.941452,1,1,1,1,0.940316,0.658163,0.327123,0.025618,0,0,0,0,0/0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0.609116,0.153821,0,0,0,0,0,0.947681,1,1,0.983284,0.156287,0,0,0,0,0,0,0.56127,0.926379,1,1,1,1,1,0.78155,0.495271,0.165086,0,0,0,0,0/0,0,0,0,0,0,0,0,1,0,0,0,0,0,0.872311,1,1,1,0.564031,0,0,0,0,0,0,1,1,0.957385,0.997789,0.743427,0.058941,0,0,0,0,0,0,0.564873,0.867427,0.987136,1,1,1,1,0.861657,0.62722,0.342205,0.053492,0,0,0,0/0,0,0,0,0,0,0,0.598362,0.265816,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0.08164,1,1,1,1,0.514909,0,0,0,0,0,0,0.08075,0.541097,0.728452,0.800688,0.848153,0.894011,0.948674,0.995461,0.948569,0.751112,0.499406,0.211078,0.007286,0,0,0/0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0.145804,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0.008614,0.327341,0.446796,0.424582,0.436442,0.497823,0.618542,0.791601,0.954951,1,0.87466,0.637095,0.385922,0.140691,0,0,0/0,0,0,0,0,0,0.996407,0.045179,0,0,0,0,0.917349,1,1,1,0.725155,0,0,0,0,0,0,0.909969,1,1,1,0.847011,0,0,0,0,0,0,0.309674,0.659329,0.654086,0.194446,0,0,0.04057,0.283035,0.609518,0.900838,1,1,0.773795,0.561869,0.361405,0.151108,0.004212,0/0,0,0,0,0,0.809297,0.437595,0,0,0,0,0.392077,1,1,1,1,0.072866,0,0,0,0,0.070806,1,1,1,1,0.644929,0,0,0,0,0,0,0.737894,1,1,0.71785,0,0,0,0,0,0.435522,0.868105,1,1,0.915593,0.756379,0.610317,0.41789,0.138555,0/0,0,0,0,0.184996,1,0,0,0,0,0.043825,1,1,1,1,0,0,0,0,0,0.437249,1,0.839425,0.753981,0.96759,1,0,0,0,0,0,0,0.818,1,1,1,0.473118,0,0,0,0,0,0.345102,0.914871,1,1,1,1,0.853281,0.649775,0.31721,0/0,0,0,0,1,0,0,0,0,0.298349,1,1,1,1,0,0,0,0,0,0.560942,1,0.478762,0.184754,0.447507,0.978792,0.123692,0,0,0,0,0,0.159703,1,1,1,1,0.356177,0,0,0,0,0,0.539498,1,1,1,1,1,1,0.805585,0.422214,0.007412/0,0,0,1,0,0,0,0,0.510296,1,1,1,1,0,0,0,0,0,0,1,0.467426,0,0,0.465627,0.764331,0,0,0,0,0,0,0.921071,1,1,1,0.982743,0,0,0,0,0,0.092609,1,1,1,1,1,1,1,0.889149,0.432651,0/0,0,1,0.792352,0,0,0,0.525768,1,0.982896,0.983612,1,0.60791,0,0,0,0,0,0.831756,1,0,0,0,1,0.484886,0,0,0,0,0,0.753402,1,1,1,0.984174,0,0,0,0,0,0.251643,1,1,1,1,0.984359,0.880377,0.858263,0.953485,0.928259,0.33365,0/0,0.651419,1,0.020569,0,0,0.406797,1,1,0.819442,1,1,0,0,0,0,0,0.092879,1,0.361664,0.013432,0.016098,1,1,0,0,0,0,0.06328,1,1,1,1,0.831997,0,0,0,0,0,0.778228,1,1,1,1,0.980362,0.618562,0.506517,0.627388,0.918748,0.921994,0.127007,0/0,0.827027,0.480686,0.120006,0.039045,0.502801,1,1,0.915341,1,1,0.212864,0,0,0,0,0,0.990131,1,0.283561,0.289746,1,0.996639,0,0,0,0,0.455043,1,0.82155,0.845058,1,0.956956,0,0,0,0,0,0.957153,1,1,1,1,1,0.307595,0.006273,0.088955,0.455549,0.993474,0.710071,0,0/0.337418,0.390951,0.536621,0.44493,0.997995,1,1,1,1,1,0.766386,0,0,0,0,0,0.791441,1,0.715262,0.630902,1,0.889795,0,0,0,0,0.561032,0.858392,0.400135,0.330832,0.676702,1,0,0,0,0,0,0.1533,1,1,1,1,1,0.156069,0,0,0,0.670056,1,0.028618,0,0/0.093432,0.309676,0.553939,1,1,1,1,1,1,1,0,0,0,0,0,0.783612,1,0.83954,0.513723,1,1,0,0,0,0,0,1,0.241111,0,0.082454,0.759209,0.439884,0,0,0,0,0,0.647841,1,1,1,1,0.508614,0,0,0,0.105145,1,0.369594,0,0,0/0,0.263905,0.723392,0.784075,0.825932,0.891745,0.981841,1,1,0,0,0,0,0,0.458469,1,0.732962,0.048583,0.76816,1,0.017978,0,0,0,0,0.865295,1,0,0,0.189472,1,0.144601,0,0,0,0,0,0.852914,1,1,1,1,0,0,0,0,1,0.922801,0,0,0,0/0,0.334535,0.375318,0.405523,0.503334,0.704095,0.94545,1,0.027212,0,0,0,0,0,1,1,0,0.409302,1,0.689083,0,0,0,0,0,1,0.241834,0,0,0.980434,0.807259,0,0,0,0,0,0.290127,1,1,1,1,0,0,0,0,0.816619,1,0,0,0,0,0/0,0,0,0,0.218862,0.558162,0.898002,0.428313,0.028119,0,0,0,0,0.75914,1,0.364604,0.358499,1,1,0,0,0,0,0,1,1,0.215606,0.171015,1,1,0.008629,0,0,0,0,0,1,1,1,1,0,0,0,0,0.089825,1,0,0,0,0,0,0/0,0,0,0,0.021825,0.44135,0.316313,0.394424,0.136634,0,0,0,0.180804,0.793342,0.65369,0.595666,0.930472,0.832241,0,0,0,0,0.065413,1,1,0.652694,0.602517,1,0.966604,0,0,0,0,0,0.016828,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0/0,0,0,0,0,0.315063,0.078404,0.296159,0.342564,0.210837,0.110323,0.068744,0.611502,0.60978,0.187013,0.473379,0.329178,0,0,0,0,0.080985,1,0.985926,0.849265,0.964698,1,0.817256,0,0,0,0,0,0.132265,1,1,1,1,0.333048,0,0,0,0,0.996439,0.008857,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0.058874,0.243201,0.335036,0.383221,1,1,0.181147,0,0,0,0,0,0,0,1,1,0.571876,0.774793,1,0.91636,0,0,0,0,0,0,1,1,1,1,0.890079,0,0,0,0,0.515256,0.783801,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0.028925,0.671387,0.789212,0.725889,0.322974,0,0,0,0,0,0,0.565305,1,0.339808,0.161588,0.956882,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0.207413,0.292219,0.479985,0.450225,0.319628,0.009855,0,0,0,0,0,0.583847,0.968485,0.135282,0.902826,1,0.115555,0,0,0,0,0,0.614044,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0.169375,0,0.234458,0.151063,0,0,0,0,0,0.607855,0.539689,1,1,0.576018,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0.084984,0.264625,0.082548,0,0,0,0.001419,0.236979,0.964205,0.974451,0.885053,0,0,0,0,0,0.005283,1,1,1,1,0,0,0,0,0,0.591338,0.61189,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.148993,0.274784,0.242802,0.169235,0.118493,0.328385,0.762955,0.716507,0.454117,0,0,0,0,0,0.086823,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.043429,0.166844,0.276842,0.667386,1,0.855484,0.12471,0,0,0,0,0,0.15985,1,1,0.999568,1,0.384856,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.203795,0.7443,0.963577,0.615388,0,0,0,0,0,0,1,1,0.896847,0.999334,1,0.078304,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.203033,0.462591,0.817036,0.380585,0.063016,0,0,0,0,1,1,0.923879,0.98395,1,0.505878,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.256497,0.10453,0.343118,0.250737,0.032848,0,0,1,1,1,1,1,0.992896,0.018408,0,0,0.001088,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201924,0.346026,0.314926,0.294426,0.817041,1,1,1,1,1,0.073084,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.011473,0.17919,0.323955,0.494998,0.959817,0.946749,0.978176,1,1,0.150937,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147469,0.645854,0.6638,0.732976,0.914829,1,0.99185,0.010119,0,0,1,0.707199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.195953,0.240385,0.308404,0.519131,0.849636,1,0.363614,0.039392,0,0.703391,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.325733,0.752936,0.975775,0.520527,0.309841,0.486643,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.165213,0.599981,0.61688,0.610516,0.644844,0.910916,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.040066,0.263351,0.28009,0.320728,0.507092,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.022931,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");

    Framebuffer framebuffer(1280, 720);

    double lastTime = glfwGetTime();
    int nbFrames = 0;

    int fpsCount = 0;
    double fpsSum = 0.0;


    while (!glfwWindowShouldClose(window)) {
        double currentTime = glfwGetTime();
        nbFrames++;
        if (currentTime - lastTime >= 1.0) { // If last print was more than 1 sec ago
            double fps = double(nbFrames) / (currentTime - lastTime);
            std::string windowTitle = "Lenia++ - FPS: " + std::to_string(fps);
            glfwSetWindowTitle(window, windowTitle.c_str());
            nbFrames = 0;
            lastTime = currentTime;

            fpsSum += fps;

            std::cout << "Average FPS: " << fpsSum / ++fpsCount << std::endl;
        }

        glfwPollEvents();
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        
        glClearColor(0.137, 0.09, 0.106, 1.0);
        glClear(GL_COLOR_BUFFER_BIT);

        ImGui::NewFrame();
        ImGui::Begin("Spork Viewer", nullptr, ImGuiWindowFlags_NoResize);

        ImGui::SetWindowSize(ImVec2(lenia.getWidth() * 3, lenia.getHeight() * 3));

        const float width = ImGui::GetContentRegionAvail().x;
        const float height = ImGui::GetContentRegionAvail().y;

        framebuffer.resize(width, height);
        glViewport(0, 0, width, height);

        ImVec2 pos = ImGui::GetCursorScreenPos();

        ImGui::GetWindowDrawList()->AddImage(
            (void*)(intptr_t)framebuffer.getTexture(),
            pos,
            ImVec2(pos.x + width, pos.y + height),
            ImVec2(0, 1),
            ImVec2(1, 0)
        );

        ImGui::Text("FPS: %.1f", io.Framerate);

        ImGui::End();

        ImGui::Begin("Controls", nullptr);
        if (ImGui::Button("Pause")) {
            paused = !paused;
        }

        if (ImGui::Button("Reset")) {
            lenia.reset();
        }
        if (ImGui::Button("Randomize")) {
            lenia.randomize();
        }

        if (ImGui::Button("Step")) {
            lenia.update();
        }

        // show if its paused
        if (paused) {
            ImGui::Text("Paused");
        }

        if (ImGui::CollapsingHeader("Randomizer")) {
            ImGui::SliderInt("Patches", &lenia.randomPatches, 1, 10);
            ImGui::SliderInt("Patch Size", &lenia.randomPatchSize, 1, 30);
            if (ImGui::Button("Randomize Patches")) {
                lenia.randomizePatches();
            }
        }

        ImGui::End();

        lenia.drawImGui();

        ImGui::Render();

        framebuffer.bind();
        framebuffer.clear();

        lenia.draw();

        framebuffer.unbind();
        
        if (!paused) {
            lenia.update();
        }

        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
        glfwSwapBuffers(window);
    }

    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();
    glfwTerminate();
}